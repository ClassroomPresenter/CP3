{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid5900259\rsid6511046\rsid9399468\rsid10423494\rsid12809556}
{\*\generator Microsoft Word 10.0.6802;}{\info{\title The Role of Multicast}{\author Fred Videon}{\operator Fred Videon}{\creatim\yr2006\mo6\dy29\hr14\min34}{\revtim\yr2006\mo6\dy29\hr15\min23}{\version3}{\edmins49}{\nofpages4}{\nofwords1538}
{\nofchars8770}{\*\company UW CSE}{\nofcharsws10288}{\vern16393}{\*\password 00000000}}{\*\xmlnstbl {\xmlns1 urn:schemas-microsoft-com:office:smarttags}}\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\gutter0 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1800\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot6511046 \fet0
{\*\wgrffmtfilter 013f}\sectd \linex0\sectdefaultcl\sectrsid6511046\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\widctlpar\wrapdefault\faauto\rin0\lin0\itap0\pararsid6511046 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f2\fs20\ul\insrsid6511046\charrsid6511046 The Role of Multicast
\par }{\f2\fs20\insrsid6511046 Multicast and unicast both have their advantages and disadvantages which I don't believe it is necess
ary to enumerate here.  I believe there are scenarios where multicast is the right solution, so I think multicast support should be retained in CP3.  For the short term we would continue to use MSR's {\*\xmlopen\xmlns1{\factoidname stockticker}}RTP
{\*\xmlclose} stack.  For the longer term we aim to rep
lace MSR's code with our own multicast implementation (for licensing reasons).  In order to simplify the UI, Multicast functionality may be hidden by default and enabled using app.config or a property page. 
\par 
\par }{\b\f2\fs20\ul\insrsid6511046\charrsid6511046 {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} vs. UDP
\par }{\f2\fs20\insrsid6511046 Since packet loss has been such a big issue in previous versions of CP, and since {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} provides out-of-the-box guaranteed delivery, we will begin by evaluating a 
{\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} implementation (This initial implementation will be very nearly as exists today in the CP3 code base).
\par 
\par }{\b\f2\fs20\ul\insrsid6511046\charrsid6511046 {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} Architectures
\par }{\f2\fs20\insrsid6511046 A very simple model would use one connection per student node to an instructor node.  In this model student nodes would connect only to instructors and instructors only to students.  Students would have zero or one c
onnections, and instructors would have one connection per student.  An obvious concern about this model is about how well it will scale to large numbers of students.    Q: Do we have concrete scalability goals?
\par 
\par An extension to the simple model to address some resource issues could leverage the first N student nodes with direct connections to the instructor to act as servers for additional student nodes.  In 
this model the connected students would dynamically form a tree structure, passing data down from the instructor (and back up in the case of SS).  This model would be expected to provide very good scalability at the cost of slightly increased latency for 
l
ate joining students.  Late joining students would still address the initial connection attempt to the instructor, but the instructor node would refer the connection to a prioritized list of the first tier students.  The connecting student would then read
dress the connection request to the first of the first-tier students on the list.  That request would then be either accepted or referred to the second tier, and so on.  Some investigations would be needed to determine how to best balance the tree. 

\par 
\par 
\par }{\b\f2\fs20\ul\insrsid12809556 Traffic scaling}{\b\f2\fs20\ul\insrsid6511046\charrsid6511046 
\par }{\f2\fs20\insrsid12809556 
\par One of the negative aspects of unicast delivery is that it makes much less efficient use of total network bandwidth.  This could become an issue if the network is 11Mbps wireless
.  The only way I know to deal with this is to have the instructor scale the traffic to take account of the capabilities of the network and the number of unicast connected students.
\par  
\par }{\f2\fs20\insrsid6511046 Since the instructor node is a central focal point in the above models, the instructor node can have logic added to permit dynamic prioritization of frame delivery such that as the number of student nodes increases, the de
gradation of service may be less catastrophic.
\par 
\par It would be a very good idea for the instructor node to know about how much network bandwidth is available.  This would allow reasonable traffic scaling decisions to be made.  Q: Can we query for this in the 
Framework, or through interop?.  Another possibility would be to have a property page to allow the user to manually configure an instructor node for different network types. 
\par 
\par I suspect the large data transmissions are slide images.  We could look into compressing the images in constrained network conditions.  We could also look into deferring transmission of images not currently being displayed.
\par 
\par }{\b\f2\fs20\ul\insrsid6511046\charrsid6511046 {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} Connection management
\par }{\f2\fs20\insrsid6511046 Given the simple and heirarchal "one to many" models above, we would have 
each student node assuming zero or one "client" connections.  This connection would be either a connection to an instructor or a connection to a student in a tier of the tree closer to the instructor.   Only student nodes (never instructor nodes) would in
itiate these connections.  
\par 
\par To make the instructor node more easily discoverable, we would like the instructor's {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose}
 service to use an established port number, known in advance to all nodes.  A potential issue is that the instructor's system may
 already be running an application which is using our chosen port number.  I think this case may be rare enough to work around with a dialog box warning the instructor that the port is non-standard (maybe telling the instructor which application is respon
sible for the conflict).
\par 
\par If the client is in the connected state, and the server node becomes unavailable, it would be up to the client to automatically attempt to reconnect.  If the server node is the instructor node, the client would attempt reconnection
 at a regular (randomized?) interval.  If the server node is another student node, the reconnection should be done by first addressing a connection request to the remaining student nodes in the list originally received.  If they all fail the student would
 attempt reconnection to the instructor.  If/when the instructor node's {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose}
 service does resume at the expected IPEndpoint, all first-tier connections should be automatically restored.  A similar scenario occurs when a student attempts to connect
 to an instructor that is not yet running.  There should be a visual indication (a red or green icon in the status bar?) to indicate 'attempting to connect', and 'connected' states (}{\f2\fs20\insrsid10423494 and}{\f2\fs20\insrsid6511046 
 maybe white for 'disconnected').
\par 
\par If a connected instructor or student changes role, this implies disconnection.  Connecting to a multicast group also implies disconnection (?)
\par 
\par I think we can do away with the explicit {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} server start command for the instructor.  We would assume that an instructor who is not joined to a multicast group is always running the 
{\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} Service.  This should further simplify the connection workflow.
\par 
\par }{\b\f2\fs20\ul\insrsid6511046\charrsid6511046 Instructor Node discovery (unicast)
\par }{\f2\fs20\insrsid6511046 
We would like the connections from students to instructors to be established with as little typing and clicking as possible.  There will remain a worst-case default of 'manual' connection, basically as exists now: If the student knows the instructor host 
n
ame or IP address, they can connect by typing it into a text box.  We will assume a well known port number, but allow an alternate port number to be entered.  Changes from the current manual connection functionality would be to automatically start the stu
dent node's {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} service during the manual connection, and to disable manual connection while in instructor role.
\par 
\par Since node discovery for different scenarios seems to be best handled with different techniques, I think that the best node discovery solution may be multiple solutions.  Some options below: 
\par 
\par If all nodes in the classroom are on a single subnet, an instructor node should be able to use a local UDP broadcast to make itself known.  The broadcast needs to be repeated on some interval (1 
sec?).  The broadcast message would contain address/port of the {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose} server}{\f2\fs20\insrsid5900259 , and a display name for the instructor}{\f2\fs20\insrsid6511046 
.  Clients wishing to connect would click on the instructor name. At this point they would automatically see the instructor's presentation with no further clicking.  The i
nstructor node should be able to handle multiple network interfaces, and respond dynamically to new network interfaces being enabled.  Q: do all WAPs in the world always distribute UDP broadcasts to all wireless clients?  
\par 
\par If nodes are distributed on different subnets, the problem is somewhat more complicated.
\par 
\par Advertising by multicast would work in some percentage of cases.   I believe Presenter 2 has (or had) a node advertisement facility along these lines.  It seems that the biggest problem with this sc
heme is that you can never know how large or small the TTL should be. On one hand you want to reach your target subnets, but on the other hand you don't want your advertisements to bleed over into other organizations or other classes within your organizat
i
on.  Manually setting the TTL would be confusing for users, and there are plenty of cases where there is no 'right' value.  Also, as we know, multicast will not work in many places.  It might be argued that this advertisement technique makes some sense wh
en an instructor plans on multicasting the presentation, but not when the instructor is sending over {\*\xmlopen\xmlns1{\factoidname stockticker}}TCP{\*\xmlclose}.
\par 
\par Advertisement by directed UDP broadcast to particular subnets.  The difficulty here is that somehow the instructor node would need to know 
the subnet numbers where there are potential students.  Conceivably a tech-savvy instructor could figure this out and configure it through app.config or a property page, but it doesn't seem like a good mass market approach.
\par 
\par Advertisement through a service
.  This could take many forms.  A simple approach would be to map a new file extension to launch presenter.  The file could be a little XML file that the instructor creates and posts on the class web page containing the instructor node info (there could b
e
 other items in the file too, such as a http url for a deck).  At class time the students would run a browser to the class web page and click on the file.  This would cause CP to launch in student role and connect.  Creating the startup file could be auto
m
ated through Presenter. The file could also be emailed to students, etc.  Some problems with this scheme are that the instructor (person) would need to handle posting/distribution of the startup file as a separate step, and would need to know the network 
a
ddress at the time of publishing.  In some cases this address would not be known until the instructor starts up the tablet on the network in the (physical) classroom, and would be likely to change for each session of the class (due to dhcp lease expiratio
n).
\par 
\par A more sophisticated server-based approach:  Make a web service to which all nodes connect to dynamically advertise themselves as instructors, and to}{\f2\fs20\insrsid10423494  find advertised instructors.  T}{\f2\fs20\insrsid6511046 
he web service would be designed to run on either Apache or MS IIS.
\par Pot
ential problems: There would need to be a web server available within the user's organization to run the service, and someone with the technical ability and permissions to install it.  In one sense this replaces one advertisement problem with another, in 
that nodes still need a way to find the service URL.  One possible way to advertise the web service URL would be to put it in a launch file as proposed above.
\par }\pard \ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\insrsid6511046 
\par }}